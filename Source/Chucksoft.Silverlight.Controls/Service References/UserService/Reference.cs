//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
namespace Chucksoft.Silverlight.Controls.UserService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://chucksoft.com/", ConfigurationName="UserService.UserServiceSoap")]
    public interface UserServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://chucksoft.com/GetToken", ReplyAction="*")]
        System.IAsyncResult BeginGetToken(Chucksoft.Silverlight.Controls.UserService.GetTokenRequest request, System.AsyncCallback callback, object asyncState);
        
        Chucksoft.Silverlight.Controls.UserService.GetTokenResponse EndGetToken(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://chucksoft.com/GetTokenByUsernameAndPassword", ReplyAction="*")]
        System.IAsyncResult BeginGetTokenByUsernameAndPassword(Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordRequest request, System.AsyncCallback callback, object asyncState);
        
        Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordResponse EndGetTokenByUsernameAndPassword(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetTokenRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetToken", Namespace="http://chucksoft.com/", Order=0)]
        public Chucksoft.Silverlight.Controls.UserService.GetTokenRequestBody Body;
        
        public GetTokenRequest() {
        }
        
        public GetTokenRequest(Chucksoft.Silverlight.Controls.UserService.GetTokenRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://chucksoft.com/")]
    public partial class GetTokenRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public System.Guid serviceKey;
        
        public GetTokenRequestBody() {
        }
        
        public GetTokenRequestBody(System.Guid serviceKey) {
            this.serviceKey = serviceKey;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetTokenResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetTokenResponse", Namespace="http://chucksoft.com/", Order=0)]
        public Chucksoft.Silverlight.Controls.UserService.GetTokenResponseBody Body;
        
        public GetTokenResponse() {
        }
        
        public GetTokenResponse(Chucksoft.Silverlight.Controls.UserService.GetTokenResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://chucksoft.com/")]
    public partial class GetTokenResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string GetTokenResult;
        
        public GetTokenResponseBody() {
        }
        
        public GetTokenResponseBody(string GetTokenResult) {
            this.GetTokenResult = GetTokenResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetTokenByUsernameAndPasswordRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetTokenByUsernameAndPassword", Namespace="http://chucksoft.com/", Order=0)]
        public Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordRequestBody Body;
        
        public GetTokenByUsernameAndPasswordRequest() {
        }
        
        public GetTokenByUsernameAndPasswordRequest(Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://chucksoft.com/")]
    public partial class GetTokenByUsernameAndPasswordRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string username;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string password;
        
        public GetTokenByUsernameAndPasswordRequestBody() {
        }
        
        public GetTokenByUsernameAndPasswordRequestBody(string username, string password) {
            this.username = username;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetTokenByUsernameAndPasswordResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetTokenByUsernameAndPasswordResponse", Namespace="http://chucksoft.com/", Order=0)]
        public Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordResponseBody Body;
        
        public GetTokenByUsernameAndPasswordResponse() {
        }
        
        public GetTokenByUsernameAndPasswordResponse(Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://chucksoft.com/")]
    public partial class GetTokenByUsernameAndPasswordResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string GetTokenByUsernameAndPasswordResult;
        
        public GetTokenByUsernameAndPasswordResponseBody() {
        }
        
        public GetTokenByUsernameAndPasswordResponseBody(string GetTokenByUsernameAndPasswordResult) {
            this.GetTokenByUsernameAndPasswordResult = GetTokenByUsernameAndPasswordResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface UserServiceSoapChannel : Chucksoft.Silverlight.Controls.UserService.UserServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetTokenByUsernameAndPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTokenByUsernameAndPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UserServiceSoapClient : System.ServiceModel.ClientBase<Chucksoft.Silverlight.Controls.UserService.UserServiceSoap>, Chucksoft.Silverlight.Controls.UserService.UserServiceSoap {
        
        private BeginOperationDelegate onBeginGetTokenDelegate;
        
        private EndOperationDelegate onEndGetTokenDelegate;
        
        private System.Threading.SendOrPostCallback onGetTokenCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTokenByUsernameAndPasswordDelegate;
        
        private EndOperationDelegate onEndGetTokenByUsernameAndPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onGetTokenByUsernameAndPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public UserServiceSoapClient() {
        }
        
        public UserServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetTokenCompletedEventArgs> GetTokenCompleted;
        
        public event System.EventHandler<GetTokenByUsernameAndPasswordCompletedEventArgs> GetTokenByUsernameAndPasswordCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Chucksoft.Silverlight.Controls.UserService.UserServiceSoap.BeginGetToken(Chucksoft.Silverlight.Controls.UserService.GetTokenRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetToken(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetToken(System.Guid serviceKey, System.AsyncCallback callback, object asyncState) {
            Chucksoft.Silverlight.Controls.UserService.GetTokenRequest inValue = new Chucksoft.Silverlight.Controls.UserService.GetTokenRequest();
            inValue.Body = new Chucksoft.Silverlight.Controls.UserService.GetTokenRequestBody();
            inValue.Body.serviceKey = serviceKey;
            return ((Chucksoft.Silverlight.Controls.UserService.UserServiceSoap)(this)).BeginGetToken(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Chucksoft.Silverlight.Controls.UserService.GetTokenResponse Chucksoft.Silverlight.Controls.UserService.UserServiceSoap.EndGetToken(System.IAsyncResult result) {
            return base.Channel.EndGetToken(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndGetToken(System.IAsyncResult result) {
            Chucksoft.Silverlight.Controls.UserService.GetTokenResponse retVal = ((Chucksoft.Silverlight.Controls.UserService.UserServiceSoap)(this)).EndGetToken(result);
            return retVal.Body.GetTokenResult;
        }
        
        private System.IAsyncResult OnBeginGetToken(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid serviceKey = ((System.Guid)(inValues[0]));
            return this.BeginGetToken(serviceKey, callback, asyncState);
        }
        
        private object[] OnEndGetToken(System.IAsyncResult result) {
            string retVal = this.EndGetToken(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTokenCompleted(object state) {
            if ((this.GetTokenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTokenCompleted(this, new GetTokenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTokenAsync(System.Guid serviceKey) {
            this.GetTokenAsync(serviceKey, null);
        }
        
        public void GetTokenAsync(System.Guid serviceKey, object userState) {
            if ((this.onBeginGetTokenDelegate == null)) {
                this.onBeginGetTokenDelegate = new BeginOperationDelegate(this.OnBeginGetToken);
            }
            if ((this.onEndGetTokenDelegate == null)) {
                this.onEndGetTokenDelegate = new EndOperationDelegate(this.OnEndGetToken);
            }
            if ((this.onGetTokenCompletedDelegate == null)) {
                this.onGetTokenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTokenCompleted);
            }
            base.InvokeAsync(this.onBeginGetTokenDelegate, new object[] {
                        serviceKey}, this.onEndGetTokenDelegate, this.onGetTokenCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Chucksoft.Silverlight.Controls.UserService.UserServiceSoap.BeginGetTokenByUsernameAndPassword(Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTokenByUsernameAndPassword(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetTokenByUsernameAndPassword(string username, string password, System.AsyncCallback callback, object asyncState) {
            Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordRequest inValue = new Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordRequest();
            inValue.Body = new Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordRequestBody();
            inValue.Body.username = username;
            inValue.Body.password = password;
            return ((Chucksoft.Silverlight.Controls.UserService.UserServiceSoap)(this)).BeginGetTokenByUsernameAndPassword(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordResponse Chucksoft.Silverlight.Controls.UserService.UserServiceSoap.EndGetTokenByUsernameAndPassword(System.IAsyncResult result) {
            return base.Channel.EndGetTokenByUsernameAndPassword(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndGetTokenByUsernameAndPassword(System.IAsyncResult result) {
            Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordResponse retVal = ((Chucksoft.Silverlight.Controls.UserService.UserServiceSoap)(this)).EndGetTokenByUsernameAndPassword(result);
            return retVal.Body.GetTokenByUsernameAndPasswordResult;
        }
        
        private System.IAsyncResult OnBeginGetTokenByUsernameAndPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginGetTokenByUsernameAndPassword(username, password, callback, asyncState);
        }
        
        private object[] OnEndGetTokenByUsernameAndPassword(System.IAsyncResult result) {
            string retVal = this.EndGetTokenByUsernameAndPassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTokenByUsernameAndPasswordCompleted(object state) {
            if ((this.GetTokenByUsernameAndPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTokenByUsernameAndPasswordCompleted(this, new GetTokenByUsernameAndPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTokenByUsernameAndPasswordAsync(string username, string password) {
            this.GetTokenByUsernameAndPasswordAsync(username, password, null);
        }
        
        public void GetTokenByUsernameAndPasswordAsync(string username, string password, object userState) {
            if ((this.onBeginGetTokenByUsernameAndPasswordDelegate == null)) {
                this.onBeginGetTokenByUsernameAndPasswordDelegate = new BeginOperationDelegate(this.OnBeginGetTokenByUsernameAndPassword);
            }
            if ((this.onEndGetTokenByUsernameAndPasswordDelegate == null)) {
                this.onEndGetTokenByUsernameAndPasswordDelegate = new EndOperationDelegate(this.OnEndGetTokenByUsernameAndPassword);
            }
            if ((this.onGetTokenByUsernameAndPasswordCompletedDelegate == null)) {
                this.onGetTokenByUsernameAndPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTokenByUsernameAndPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginGetTokenByUsernameAndPasswordDelegate, new object[] {
                        username,
                        password}, this.onEndGetTokenByUsernameAndPasswordDelegate, this.onGetTokenByUsernameAndPasswordCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Chucksoft.Silverlight.Controls.UserService.UserServiceSoap CreateChannel() {
            return new UserServiceSoapClientChannel(this);
        }
        
        private class UserServiceSoapClientChannel : ChannelBase<Chucksoft.Silverlight.Controls.UserService.UserServiceSoap>, Chucksoft.Silverlight.Controls.UserService.UserServiceSoap {
            
            public UserServiceSoapClientChannel(System.ServiceModel.ClientBase<Chucksoft.Silverlight.Controls.UserService.UserServiceSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetToken(Chucksoft.Silverlight.Controls.UserService.GetTokenRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetToken", _args, callback, asyncState);
                return _result;
            }
            
            public Chucksoft.Silverlight.Controls.UserService.GetTokenResponse EndGetToken(System.IAsyncResult result) {
                object[] _args = new object[0];
                Chucksoft.Silverlight.Controls.UserService.GetTokenResponse _result = ((Chucksoft.Silverlight.Controls.UserService.GetTokenResponse)(base.EndInvoke("GetToken", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTokenByUsernameAndPassword(Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetTokenByUsernameAndPassword", _args, callback, asyncState);
                return _result;
            }
            
            public Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordResponse EndGetTokenByUsernameAndPassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordResponse _result = ((Chucksoft.Silverlight.Controls.UserService.GetTokenByUsernameAndPasswordResponse)(base.EndInvoke("GetTokenByUsernameAndPassword", _args, result)));
                return _result;
            }
        }
    }
}
