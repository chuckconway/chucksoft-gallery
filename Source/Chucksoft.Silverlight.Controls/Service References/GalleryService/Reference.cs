//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
namespace Chucksoft.Silverlight.Controls.GalleryService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Gallery", Namespace="http://chucksoft.com/")]
    public partial class Gallery : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int GalleryIdField;
        
        private int PhotoCountField;
        
        private string NameField;
        
        private string DescriptionField;
        
        private System.DateTime GalleryDateField;
        
        private int UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int GalleryId {
            get {
                return this.GalleryIdField;
            }
            set {
                if ((this.GalleryIdField.Equals(value) != true)) {
                    this.GalleryIdField = value;
                    this.RaisePropertyChanged("GalleryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int PhotoCount {
            get {
                return this.PhotoCountField;
            }
            set {
                if ((this.PhotoCountField.Equals(value) != true)) {
                    this.PhotoCountField = value;
                    this.RaisePropertyChanged("PhotoCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=4)]
        public System.DateTime GalleryDate {
            get {
                return this.GalleryDateField;
            }
            set {
                if ((this.GalleryDateField.Equals(value) != true)) {
                    this.GalleryDateField = value;
                    this.RaisePropertyChanged("GalleryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=5)]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://chucksoft.com/", ConfigurationName="GalleryService.GalleryServiceSoap")]
    public interface GalleryServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://chucksoft.com/GetAllGalleries", ReplyAction="*")]
        System.IAsyncResult BeginGetAllGalleries(Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesRequest request, System.AsyncCallback callback, object asyncState);
        
        Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesResponse EndGetAllGalleries(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetAllGalleriesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetAllGalleries", Namespace="http://chucksoft.com/", Order=0)]
        public Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesRequestBody Body;
        
        public GetAllGalleriesRequest() {
        }
        
        public GetAllGalleriesRequest(Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://chucksoft.com/")]
    public partial class GetAllGalleriesRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string token;
        
        public GetAllGalleriesRequestBody() {
        }
        
        public GetAllGalleriesRequestBody(string token) {
            this.token = token;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetAllGalleriesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetAllGalleriesResponse", Namespace="http://chucksoft.com/", Order=0)]
        public Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesResponseBody Body;
        
        public GetAllGalleriesResponse() {
        }
        
        public GetAllGalleriesResponse(Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://chucksoft.com/")]
    public partial class GetAllGalleriesResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public System.Collections.Generic.List<Chucksoft.Silverlight.Controls.GalleryService.Gallery> GetAllGalleriesResult;
        
        public GetAllGalleriesResponseBody() {
        }
        
        public GetAllGalleriesResponseBody(System.Collections.Generic.List<Chucksoft.Silverlight.Controls.GalleryService.Gallery> GetAllGalleriesResult) {
            this.GetAllGalleriesResult = GetAllGalleriesResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface GalleryServiceSoapChannel : Chucksoft.Silverlight.Controls.GalleryService.GalleryServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetAllGalleriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllGalleriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Chucksoft.Silverlight.Controls.GalleryService.Gallery> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Chucksoft.Silverlight.Controls.GalleryService.Gallery>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GalleryServiceSoapClient : System.ServiceModel.ClientBase<Chucksoft.Silverlight.Controls.GalleryService.GalleryServiceSoap>, Chucksoft.Silverlight.Controls.GalleryService.GalleryServiceSoap {
        
        private BeginOperationDelegate onBeginGetAllGalleriesDelegate;
        
        private EndOperationDelegate onEndGetAllGalleriesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllGalleriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public GalleryServiceSoapClient() {
        }
        
        public GalleryServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GalleryServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GalleryServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GalleryServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetAllGalleriesCompletedEventArgs> GetAllGalleriesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Chucksoft.Silverlight.Controls.GalleryService.GalleryServiceSoap.BeginGetAllGalleries(Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllGalleries(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetAllGalleries(string token, System.AsyncCallback callback, object asyncState) {
            Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesRequest inValue = new Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesRequest();
            inValue.Body = new Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesRequestBody();
            inValue.Body.token = token;
            return ((Chucksoft.Silverlight.Controls.GalleryService.GalleryServiceSoap)(this)).BeginGetAllGalleries(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesResponse Chucksoft.Silverlight.Controls.GalleryService.GalleryServiceSoap.EndGetAllGalleries(System.IAsyncResult result) {
            return base.Channel.EndGetAllGalleries(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.Collections.Generic.List<Chucksoft.Silverlight.Controls.GalleryService.Gallery> EndGetAllGalleries(System.IAsyncResult result) {
            Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesResponse retVal = ((Chucksoft.Silverlight.Controls.GalleryService.GalleryServiceSoap)(this)).EndGetAllGalleries(result);
            return retVal.Body.GetAllGalleriesResult;
        }
        
        private System.IAsyncResult OnBeginGetAllGalleries(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            return this.BeginGetAllGalleries(token, callback, asyncState);
        }
        
        private object[] OnEndGetAllGalleries(System.IAsyncResult result) {
            System.Collections.Generic.List<Chucksoft.Silverlight.Controls.GalleryService.Gallery> retVal = this.EndGetAllGalleries(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllGalleriesCompleted(object state) {
            if ((this.GetAllGalleriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllGalleriesCompleted(this, new GetAllGalleriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllGalleriesAsync(string token) {
            this.GetAllGalleriesAsync(token, null);
        }
        
        public void GetAllGalleriesAsync(string token, object userState) {
            if ((this.onBeginGetAllGalleriesDelegate == null)) {
                this.onBeginGetAllGalleriesDelegate = new BeginOperationDelegate(this.OnBeginGetAllGalleries);
            }
            if ((this.onEndGetAllGalleriesDelegate == null)) {
                this.onEndGetAllGalleriesDelegate = new EndOperationDelegate(this.OnEndGetAllGalleries);
            }
            if ((this.onGetAllGalleriesCompletedDelegate == null)) {
                this.onGetAllGalleriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllGalleriesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllGalleriesDelegate, new object[] {
                        token}, this.onEndGetAllGalleriesDelegate, this.onGetAllGalleriesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Chucksoft.Silverlight.Controls.GalleryService.GalleryServiceSoap CreateChannel() {
            return new GalleryServiceSoapClientChannel(this);
        }
        
        private class GalleryServiceSoapClientChannel : ChannelBase<Chucksoft.Silverlight.Controls.GalleryService.GalleryServiceSoap>, Chucksoft.Silverlight.Controls.GalleryService.GalleryServiceSoap {
            
            public GalleryServiceSoapClientChannel(System.ServiceModel.ClientBase<Chucksoft.Silverlight.Controls.GalleryService.GalleryServiceSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetAllGalleries(Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetAllGalleries", _args, callback, asyncState);
                return _result;
            }
            
            public Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesResponse EndGetAllGalleries(System.IAsyncResult result) {
                object[] _args = new object[0];
                Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesResponse _result = ((Chucksoft.Silverlight.Controls.GalleryService.GetAllGalleriesResponse)(base.EndInvoke("GetAllGalleries", _args, result)));
                return _result;
            }
        }
    }
}
